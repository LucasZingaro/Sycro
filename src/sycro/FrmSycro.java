/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sycro;

import java.awt.HeadlessException;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;

/**
 * Formulário para operação Sycro.
 *
 * @author Lucas Zingaro
 */
public class FrmSycro extends javax.swing.JFrame {

    /**
     * Objeto da classe Sycro, utilizado para as funcionalidades.
     */
    Sycro sycro = new Sycro(this);

    /**
     * Boolean para verificação da origem.
     */
    protected boolean isSetOrigem;

    /**
     * Boolean para verificação do destino.
     */
    protected boolean isSetDestino;

    /**
     * Array de extensões, arquivos e pastas para serem ignoradas na operação.
     */
    private static String[] listaIgn = new String[0];

    /**
     * Creates new form FrmSycro
     */
    public FrmSycro() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenu1 = new javax.swing.JMenu();
        jLabel3 = new javax.swing.JLabel();
        btnOrigem = new javax.swing.JButton();
        btnDestino = new javax.swing.JButton();
        btnIgnorarExt = new javax.swing.JButton();
        textExt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        contTime = new javax.swing.JSpinner();
        btnAtivar = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        btnDesativar = new javax.swing.JButton();
        radioDir = new javax.swing.JRadioButton();
        radioFile = new javax.swing.JRadioButton();
        checkOverwrite = new javax.swing.JCheckBox();
        cbExts = new javax.swing.JComboBox<>();
        textPathOrigem = new javax.swing.JTextField();
        textPathDestino = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        menuOptions = new javax.swing.JMenu();
        menuItemTamanho = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sycro");
        setMinimumSize(new java.awt.Dimension(375, 400));
        setPreferredSize(new java.awt.Dimension(375, 400));

        jLabel3.setText("Extensões, Arquivos e Pastas Ignoradas (Separadas por vírgula)");

        btnOrigem.setText("Origem");
        btnOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrigemActionPerformed(evt);
            }
        });

        btnDestino.setText("Destino");
        btnDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDestinoActionPerformed(evt);
            }
        });

        btnIgnorarExt.setText("Ignorar");
        btnIgnorarExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIgnorarExtActionPerformed(evt);
            }
        });

        jLabel4.setText("Tempo de de sincronização (em segundos)");

        btnAtivar.setText("Ativar");
        btnAtivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtivarActionPerformed(evt);
            }
        });

        btnDesativar.setText("Desativar");
        btnDesativar.setEnabled(false);
        btnDesativar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesativarActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioDir);
        radioDir.setSelected(true);
        radioDir.setText("Diretório");

        buttonGroup1.add(radioFile);
        radioFile.setText("Arquivo único");
        radioFile.setEnabled(false);

        checkOverwrite.setText("Overwrite");

        textPathOrigem.setEditable(false);

        textPathDestino.setEditable(false);

        menuOptions.setText("Options");

        menuItemTamanho.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemTamanho.setText("Limite de Tamanho da Origem");
        menuItemTamanho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTamanhoActionPerformed(evt);
            }
        });
        menuOptions.add(menuItemTamanho);

        menuBar.add(menuOptions);

        menuHelp.setText("Help");

        jMenuItem1.setText("Informações");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuHelp.add(jMenuItem1);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textExt)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOrigem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textPathOrigem))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDestino)
                        .addGap(4, 4, 4)
                        .addComponent(textPathDestino))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnIgnorarExt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbExts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAtivar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDesativar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioDir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioFile))
                            .addComponent(checkOverwrite)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(contTime, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioDir)
                    .addComponent(radioFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOrigem)
                    .addComponent(textPathOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDestino)
                    .addComponent(textPathDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIgnorarExt)
                    .addComponent(cbExts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(checkOverwrite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(contTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtivar)
                    .addComponent(btnDesativar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrigemActionPerformed
        try {

            JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            startProgressBar(3000);
            if (radioDir.isSelected()) {
                jfc.setDialogTitle("Escolha um diretório");
                jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            } else {
                jfc.setDialogTitle("Escolha um arquivo");
            }
            int returnValue = jfc.showSaveDialog(null);

            if (radioDir.isSelected()) {

                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    if (jfc.getSelectedFile().isDirectory()) {
                        
                        if (CopyArq.getFolderSizeInG(jfc.getSelectedFile().getPath()) <= Sycro.limiteDeTamanhoDaPasta) {
                            sycro.origem = jfc.getSelectedFile();
                            textPathOrigem.setText(sycro.origem.getAbsolutePath());
                            isSetOrigem = true;
                            
                        } else {
                            JOptionPane.showMessageDialog(null, "O tamanho da pasta ecede o limite do programa (" + Sycro.limiteDeTamanhoDaPasta + " gb)", "Alerta", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            } else {
                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    sycro.origem = jfc.getSelectedFile();
                    textPathOrigem.setText(sycro.origem.getAbsolutePath());
                    isSetOrigem = true;
                }
            }
        } catch (HeadlessException e) {
            isSetOrigem = false;
            JOptionPane.showMessageDialog(null, "Erro: " + e, "Alerta", JOptionPane.ERROR_MESSAGE);
        }
        stopProgressBar();
    }//GEN-LAST:event_btnOrigemActionPerformed

    private void btnDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDestinoActionPerformed
        try {
            JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            jfc.setDialogTitle("Escolha um diretório");
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int returnValue = jfc.showSaveDialog(null);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                if (jfc.getSelectedFile().isDirectory()) {
                    sycro.destino = jfc.getSelectedFile();
                    textPathDestino.setText(sycro.destino.getAbsolutePath());
                    isSetDestino = true;
                }
            }

        } catch (HeadlessException e) {
            isSetDestino = false;
            JOptionPane.showMessageDialog(null, "Erro: " + e, "Alerta", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDestinoActionPerformed

    private void btnIgnorarExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIgnorarExtActionPerformed
        cbExts.removeAllItems();
        String s = textExt.getText();
        String ns = "";
        if (!s.isEmpty()) {
            if (s.contains(", ")) {
                s = s.replace(", ", ",");
            }
            if (s.contains(" ")) {
                for (int i = 0; i < s.length(); i++) {
                    if (!(s.charAt(i) == ' ')) {
                        ns += s.charAt(i);
                    }
                }
                s = ns;
            }
        }
        ns = "";
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ',') {
                cbExts.addItem(ns);
                ns = "";
            } else {
                ns += s.charAt(i);
            }
            if (i == s.length() - 1) {
                cbExts.addItem(ns);
                ns = "";
            }
        }
        listaIgn = new String[cbExts.getItemCount()];
        for (int i = 0; i < listaIgn.length; i++) {
            listaIgn[i] = cbExts.getItemAt(i);
        }

    }//GEN-LAST:event_btnIgnorarExtActionPerformed

    private void btnAtivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtivarActionPerformed
        try {
            if (!isSetOrigem) {
                JOptionPane.showMessageDialog(null, "Defina o uma origem válida!!", "Alerta", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!isSetDestino) {
                JOptionPane.showMessageDialog(null, "Defina o diretório de destino!!", "Alerta", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int intervalo = Integer.parseInt(contTime.getValue().toString()) * 1000;
            if (intervalo >= 3000) {
                sycro.setCopiaTimer(listaIgn.clone(), checkOverwrite.isSelected(), intervalo);
                startProgressBar(intervalo);
                btnAtivar.setEnabled(false);
                btnDesativar.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null, "Devido á questões de desempenho o valor mínimo é 3 segundos", "Alerta", JOptionPane.ERROR_MESSAGE);
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Erro: " + e, "Alerta", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnAtivarActionPerformed

    private void btnDesativarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesativarActionPerformed
        try {
            sycro.stop();
            stopProgressBar();
            btnAtivar.setEnabled(true);
            btnDesativar.setEnabled(false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro: " + e, "Alerta", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDesativarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(
                null,//parente 
                  "Este é um programa java simples para sincronizar o(s) arquivo(s)\n"
                + "entre dois diretórios diferentes. Considerando também extensões,\n"
                + "arquivos e ou pastas que desejam ser ignoradas pelo usuário.    \n\n"
                + "Para utilizar suas funções é necessário ecolher a origem e o    \n"
                + "destino de seus arquivos.                                       \n\n"
                + "É opcional a sobrescrição de arquivos, denominada Overwrite,    \n"
                + "porém necessário para atualização do conteudo dos arquivos.     \n\n"
                + "Exemplos de: \n"
                + "     Extensões que devem ser ignoradas: .txt,.php,.html         \n"
                + "     Arquivos que devem ser ignorados:  nome.txt,nome2.txt      \n"
                + "     Pastas que devem ser ignoradas:   nomeDaPasta,nome pasta   \n"
                + "     Todos Juntos: .txt,nome.php,nomeDaPasta,nome pasta,.html   \n\n"
                + "Por precaução, existe uma configuração de limite do tamanho do  \n"
                + "diretório origem.                                               \n\n\n"
                + "Este é um projeto aberto para fins educativos e seu código esta \n"
                + "postado no github. Estou aberto a sujestões.                    \n\n"
                + "Autor: Lucas Zingaro                                            \n"
                + "Github: www.github.com/LucasZingaro",//texto
                "Informações",//titulo
                JOptionPane.INFORMATION_MESSAGE);//tipo
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuItemTamanhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTamanhoActionPerformed
        try {
            String s = JOptionPane.showInputDialog("Informe o Limite de do tamanho da pasta em GigaBytes (defalt:" + Sycro.limiteDeTamanhoDaPasta + "gb)", Sycro.limiteDeTamanhoDaPasta);
            if (s != null && s.length() > 0) {
                try {
                    double value = Double.parseDouble(s);
                    if (value > 0) {
                        Sycro.limiteDeTamanhoDaPasta = value;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Valor inválido", "Alerta", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (HeadlessException e) {
            //JOptionPane.showMessageDialog(null, "Erro: " + e, "Alerta", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItemTamanhoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSycro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSycro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSycro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSycro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrmSycro().setVisible(true);
            }
        });
    }

    Timer proBar = new Timer();

    /**
     * Define e inicia o funcionamento da barra de progresso.
     *
     * @param intervalo - Intervalo de ação da barra em milisegundos
     */
    public void startProgressBar(int intervalo) {
        stopProgressBar();
        proBar = new Timer();
        proBar.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (progressBar.getValue() >= 100) {
                    progressBar.setValue(0);
                }
                progressBar.setValue(progressBar.getValue() + 100 / 10);
            }
        }, 500, intervalo / 10);
    }

    /**
     * Para o funcionamento da barra de progresso
     */
    public void stopProgressBar() {
        proBar.cancel();
        proBar.purge();
        progressBar.setValue(0);
    }
    
    public void frmClear(){
        textPathDestino.setText("");
        isSetDestino=false;
        textPathOrigem.setText("");
        isSetDestino=false;
        btnAtivar.setEnabled(true);
        btnDesativar.setEnabled(false);
        stopProgressBar();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtivar;
    private javax.swing.JButton btnDesativar;
    private javax.swing.JButton btnDestino;
    private javax.swing.JButton btnIgnorarExt;
    private javax.swing.JButton btnOrigem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbExts;
    public javax.swing.JCheckBox checkOverwrite;
    private javax.swing.JSpinner contTime;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemTamanho;
    private javax.swing.JMenu menuOptions;
    public javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton radioDir;
    private javax.swing.JRadioButton radioFile;
    public javax.swing.JTextField textExt;
    private javax.swing.JTextField textPathDestino;
    private javax.swing.JTextField textPathOrigem;
    // End of variables declaration//GEN-END:variables
}
